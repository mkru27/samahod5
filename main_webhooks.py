import os
import asyncio
from dataclasses import dataclass, field
from typing import Dict, Optional, Set, List, Tuple
from datetime import datetime, timedelta

from dotenv import load_dotenv
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, PlainTextResponse

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Update

# ===================== CONFIG =====================
load_dotenv()

CUSTOMER_BOT_TOKEN    = os.getenv("CUSTOMER_BOT_TOKEN")
PRO_BOT_TOKEN         = os.getenv("PRO_BOT_TOKEN")
DISPATCHER_BOT_TOKEN  = os.getenv("DISPATCHER_BOT_TOKEN")
if not (CUSTOMER_BOT_TOKEN and PRO_BOT_TOKEN and DISPATCHER_BOT_TOKEN):
    raise RuntimeError("Set CUSTOMER_BOT_TOKEN, PRO_BOT_TOKEN, DISPATCHER_BOT_TOKEN")

ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x.isdigit()}
SUPPORT_PHONE = os.getenv("SUPPORT_PHONE", "+37529XXXXXXX")

BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL")  # e.g., https://your-service.onrender.com
if not BASE_WEBHOOK_URL:
    raise RuntimeError("Set BASE_WEBHOOK_URL to your public Render URL (e.g. https://appname.onrender.com)")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")  # optional but recommended

# Bots
customer_bot   = Bot(CUSTOMER_BOT_TOKEN,   default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
pro_bot        = Bot(PRO_BOT_TOKEN,        default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dispatcher_bot = Bot(DISPATCHER_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))

# Dispatchers (—Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ FSM/—Ö—ç–Ω–¥–ª–µ—Ä—ã)
dp_customer   = Dispatcher(storage=MemoryStorage())
dp_pro        = Dispatcher(storage=MemoryStorage())
dp_dispatcher = Dispatcher(storage=MemoryStorage())

r_customer   = Router()
r_pro        = Router()
r_dispatcher = Router()

dp_customer.include_router(r_customer)
dp_pro.include_router(r_pro)
dp_dispatcher.include_router(r_dispatcher)

# ===================== DATA MODELS =====================
CATEGORIES = [
    "–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä", "–ú–∏–Ω–∏-—ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä", "–ü–æ–≥—Ä—É–∑—á–∏–∫", "–ú–∏–Ω–∏-–ø–æ–≥—Ä—É–∑—á–∏–∫",
    "–°–∞–º–æ—Å–≤–∞–ª", "–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä", "–ê–≤—Ç–æ–≤—ã—à–∫–∞", "–ö—Ä–∞–Ω",
    "–ë–µ—Ç–æ–Ω–Ω—ã–π –Ω–∞—Å–æ—Å",
    "–î–µ–º–æ–Ω—Ç–∞–∂–Ω–∞—è –±—Ä–∏–≥–∞–¥–∞", "–ö–ª–∞–¥–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
    "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ö—Ä–æ–≤–ª—è", "–°–≤–∞—Ä–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
]

@dataclass
class Executor:
    user_id: int
    name: str = ""
    phone: str = ""
    categories: Set[str] = field(default_factory=set)
    status: str = "pending"  # pending|approved|blocked
    registered_at: datetime = field(default_factory=datetime.utcnow)

@dataclass
class Order:
    id: int
    customer_id: int
    customer_phone: str
    category: str
    description: str
    address: str
    date_str: str
    created_at: datetime = field(default_factory=datetime.utcnow)
    likes: Set[int] = field(default_factory=set)  # executor user_ids

EXECUTORS: Dict[int, Executor] = {}  # key = executor user_id (ProBot user)
ORDERS: Dict[int, Order] = {}
_order_seq = 1

def next_order_id() -> int:
    global _order_seq
    i = _order_seq
    _order_seq += 1
    return i

# ===================== HELPERS =====================
def mention(uid: int, username: Optional[str], full_name: str) -> str:
    return f"@{username}" if username else f"[{full_name}](tg://user?id={uid})"

def valid_by_fmt375(phone: str) -> bool:
    p = (phone or "").replace(" ", "").replace("-", "")
    return p.startswith("+375") and len(p) == 13 and p[1:].isdigit()

async def notify_admins(text: str):
    for aid in ADMIN_IDS:
        try:
            await dispatcher_bot.send_message(aid, text)
        except Exception:
            pass

def chunk_buttons(items: List[str], prefix: str, per_row: int = 2) -> List[List[InlineKeyboardButton]]:
    rows, row = [], []
    for title in items:
        row.append(InlineKeyboardButton(text=title, callback_data=f"{prefix}:{title}"))
        if len(row) == per_row:
            rows.append(row); row = []
    if row:
        rows.append(row)
    return rows

# ===================== CUSTOMER BOT =====================
class CBNewOrder(StatesGroup):
    waiting_phone = State()
    waiting_category = State()
    waiting_description = State()
    waiting_address = State()
    waiting_date = State()

class CBCallback(StatesGroup):
    waiting_phone = State()

def cb_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="cb:new")],
        [InlineKeyboardButton(text="üìû –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫", callback_data="cb:call")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="cb:about")],
    ])

ABOUT_TEXT = (
    "–ú—ã ‚Äî –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ –ú–æ–≥–∏–ª—ë–≤–µ.\n\n"
    "‚Ä¢ –ü–æ–º–æ–≥–∞–µ–º –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ —Ç–µ—Ö–Ω–∏–∫—É –∏ –±—Ä–∏–≥–∞–¥—ã.\n"
    "‚Ä¢ –ü–æ–¥–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ–¥ –≤–∞—à—É –∑–∞–¥–∞—á—É.\n"
    "‚Ä¢ –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç.\n\n"
    f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: *{SUPPORT_PHONE}*"
)

@r_customer.message(CommandStart())
async def cb_start(m: Message, state: FSMContext):
    await m.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å?", reply_markup=cb_main_menu())

@r_customer.callback_query(F.data == "cb:about")
async def cb_about(c: CallbackQuery):
    await c.message.answer(ABOUT_TEXT)
    await c.answer()

@r_customer.callback_query(F.data == "cb:call")
async def cb_call(c: CallbackQuery, state: FSMContext):
    await state.set_state(CBCallback.waiting_phone)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cb:home")]])
    await c.message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä *–≤ —Ñ–æ—Ä–º–∞—Ç–µ* `+375XXXXXXXXX` ‚Äî –º—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.", reply_markup=kb)
    await c.answer()

@r_customer.message(CBCallback.waiting_phone)
async def cb_call_phone(m: Message, state: FSMContext):
    phone = (m.text or "").strip().replace(" ", "").replace("-", "")
    if not valid_by_fmt375(phone):
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+375XXXXXXXXX` (—Ä–æ–≤–Ω–æ 9 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +375).")
        return
    who = mention(m.from_user.id, m.from_user.username, m.from_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await notify_admins(f"üìû *–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫*\n–û—Ç: {who}\n–¢–µ–ª–µ—Ñ–æ–Ω: *{phone}*")
    await state.clear()
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ–¥–∞–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É ‚Äî —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=cb_main_menu())

@r_customer.callback_query(F.data == "cb:home")
async def cb_home(c: CallbackQuery, state: FSMContext):
    await state.clear()
    await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=cb_main_menu())
    await c.answer()

# ---- –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É ----
def cb_dates_menu() -> InlineKeyboardMarkup:
    today = datetime.now()
    d0, d1, d2 = today, today + timedelta(days=1), today + timedelta(days=2)
    rows = [
        [InlineKeyboardButton(text=f"–°–µ–≥–æ–¥–Ω—è ({d0.strftime('%d.%m')})", callback_data=f"cbdate:{d0.strftime('%Y-%m-%d')}")],
        [InlineKeyboardButton(text=f"–ó–∞–≤—Ç—Ä–∞ ({d1.strftime('%d.%m')})", callback_data=f"cbdate:{d1.strftime('%Y-%m-%d')}")],
        [InlineKeyboardButton(text=f"–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ({d2.strftime('%d.%m')})", callback_data=f"cbdate:{d2.strftime('%Y-%m-%d')}")],
        [InlineKeyboardButton(text="üìÖ –í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", callback_data="cbdate:week")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cb:home")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def cb_dates_week() -> InlineKeyboardMarkup:
    base = datetime.now()
    rows = []
    for i in range(0, 7):
        d = base + timedelta(days=i)
        rows.append([InlineKeyboardButton(text=d.strftime("%a %d.%m"), callback_data=f"cbdate:{d.strftime('%Y-%m-%d')}")])
    rows.append([InlineKeyboardButton(text="‚óÄÔ∏é –ù–∞–∑–∞–¥", callback_data="cbdate:back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

@r_customer.callback_query(F.data == "cb:new")
async def cb_new(c: CallbackQuery, state: FSMContext):
    await state.set_state(CBNewOrder.waiting_phone)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cb:home")]])
    await c.message.answer("–î–ª—è —Å–≤—è–∑–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä `+375XXXXXXXXX`:", reply_markup=kb)
    await c.answer()

@r_customer.message(CBNewOrder.waiting_phone)
async def cb_new_phone(m: Message, state: FSMContext):
    phone = (m.text or "").strip().replace(" ", "").replace("-", "")
    if not valid_by_fmt375(phone):
        await m.answer("–§–æ—Ä–º–∞—Ç: `+375XXXXXXXXX` (—Ä–æ–≤–Ω–æ 9 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +375).")
        return
    await state.update_data(customer_phone=phone)
    await state.set_state(CBNewOrder.waiting_category)
    rows = chunk_buttons(CATEGORIES, "cbcat", per_row=2)
    rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cb:home")])
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))

@r_customer.callback_query(F.data.startswith("cbcat:"), CBNewOrder.waiting_category)
async def cb_new_cat(c: CallbackQuery, state: FSMContext):
    cat = c.data.split(":", 1)[1]
    await state.update_data(category=cat)
    await state.set_state(CBNewOrder.waiting_description)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cb:home")]])
    await c.message.answer("–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ (–æ–±—ä—ë–º, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏):", reply_markup=kb)
    await c.answer()

@r_customer.message(CBNewOrder.waiting_description)
async def cb_new_descr(m: Message, state: FSMContext):
    await state.update_data(description=(m.text or "").strip())
    await state.set_state(CBNewOrder.waiting_address)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cb:home")]])
    await m.answer("–ê–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º; –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é):", reply_markup=kb)

@r_customer.message(CBNewOrder.waiting_address)
async def cb_new_addr(m: Message, state: FSMContext):
    await state.update_data(address=(m.text or "").strip())
    await state.set_state(CBNewOrder.waiting_date)
    await m.answer("–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—ã?", reply_markup=cb_dates_menu())

@r_customer.callback_query(CBNewOrder.waiting_date, F.data.startswith("cbdate:"))
async def cb_new_date(c: CallbackQuery, state: FSMContext):
    val = c.data.split(":", 1)[1]
    if val == "week":
        await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏:", reply_markup=cb_dates_week()); await c.answer(); return
    if val == "back":
        await c.message.edit_text("–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—ã?", reply_markup=cb_dates_menu()); await c.answer(); return

    data = await state.get_data()
    phone = data["customer_phone"]; category = data["category"]
    description = data["description"]; address = data["address"]
    date_str = datetime.strptime(val, "%Y-%m-%d").strftime("%d.%m.%Y")

    order_id = next_order_id()
    ORDERS[order_id] = Order(
        id=order_id, customer_id=c.from_user.id, customer_phone=phone,
        category=category, description=description, address=address, date_str=date_str
    )

    await c.message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ *#{order_id}* —Å–æ–∑–¥–∞–Ω–∞.\n\n"
        f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
        f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
        f"*–ê–¥—Ä–µ—Å:* {address}\n"
        f"*–î–∞—Ç–∞:* {date_str}\n\n"
        "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º. –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
        reply_markup=cb_main_menu()
    )
    await state.clear(); await c.answer()

    # —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤ ProBot –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await send_order_to_executors(order_id)

# ===================== PRO BOT (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏) =====================
class ProReg(StatesGroup):
    waiting_name = State()
    waiting_phone = State()
    picking_categories = State()
    confirm = State()

def pro_main_menu(ex: Optional[Executor]) -> InlineKeyboardMarkup:
    rows = []
    rows.append([InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="pro:cats")])
    rows.append([InlineKeyboardButton(text="üìû –ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="pro:phone")])
    rows.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="pro:help")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def cats_keyboard(selected: Set[str]) -> InlineKeyboardMarkup:
    rows = []
    for c in CATEGORIES:
        mark = "‚úÖ " if c in selected else ""
        rows.append([InlineKeyboardButton(text=f"{mark}{c}", callback_data=f"procat:{c}")])
        rows.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="pro:cats_ok")]) if False else None
    rows.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="pro:cats_ok")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

@r_pro.message(CommandStart())
async def pro_start(m: Message, state: FSMContext):
    # deep-link: /start exec
    payload = (m.text or "").split(maxsplit=1)
    if len(payload) > 1 and payload[1].strip().lower() == "exec":
        # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        await state.set_state(ProReg.waiting_name)
        await m.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è / –∫–æ–º–ø–∞–Ω–∏—é:")
        return

    ex = EXECUTORS.get(m.from_user.id)
    status = ex.status if ex else "–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
    await m.answer(f"–ü—Ä–∏–≤–µ—Ç! –°—Ç–∞—Ç—É—Å: *{status}*.\n–ú–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=pro_main_menu(ex))

@r_pro.message(ProReg.waiting_name)
async def pro_reg_name(m: Message, state: FSMContext):
    await state.update_data(name=(m.text or "").strip())
    await state.set_state(ProReg.waiting_phone)
    await m.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ `+375XXXXXXXXX`:")

@r_pro.message(ProReg.waiting_phone)
async def pro_reg_phone(m: Message, state: FSMContext):
    phone = (m.text or "").strip().replace(" ", "").replace("-", "")
    if not valid_by_fmt375(phone):
        await m.answer("–§–æ—Ä–º–∞—Ç: `+375XXXXXXXXX` (—Ä–æ–≤–Ω–æ 9 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +375)."); return
    await state.update_data(phone=phone, selected=set())
    await state.set_state(ProReg.picking_categories)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ *–ì–æ—Ç–æ–≤–æ*:",
                   reply_markup=cats_keyboard(set()))

@r_pro.callback_query(F.data.startswith("procat:"), ProReg.picking_categories)
async def pro_pick_cat(c: CallbackQuery, state: FSMContext):
    cat = c.data.split(":", 1)[1]
    data = await state.get_data()
    selected: Set[str] = set(data.get("selected") or set())
    if cat in selected: selected.remove(cat)
    else: selected.add(cat)
    await state.update_data(selected=list(selected))
    await c.message.edit_reply_markup(reply_markup=cats_keyboard(selected))
    await c.answer()

@r_pro.callback_query(F.data == "pro:cats_ok", ProReg.picking_categories)
async def pro_cats_ok(c: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data["name"]; phone = data["phone"]; selected = set(data.get("selected") or [])
    if not selected:
        await c.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True); return
    EXECUTORS[c.from_user.id] = Executor(
        user_id=c.from_user.id, name=name, phone=phone, categories=selected, status="pending"
    )
    await state.clear()
    await c.message.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
    who = mention(c.from_user.id, c.from_user.username, c.from_user.full_name or name)
    await notify_admins(
        "üÜï *–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è*\n"
        f"{who}\n–¢–µ–ª–µ—Ñ–æ–Ω: *{phone}*\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(sorted(selected))}\n"
        f"–û–¥–æ–±—Ä–∏—Ç—å: /exec_approve {c.from_user.id}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: /exec_block {c.from_user.id}"
    )
    await c.answer()

@r_pro.callback_query(F.data == "pro:cats")
async def pro_show_cats(c: CallbackQuery):
    ex = EXECUTORS.get(c.from_user.id)
    if not ex:
        await c.message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ Start –ø–æ –¥–∏–ø–ª–∏–Ω–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await c.answer(); return
    await c.message.answer("–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + ("\n".join(sorted(ex.categories)) or "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"))
    await c.answer()

@r_pro.callback_query(F.data == "pro:phone")
async def pro_show_phone(c: CallbackQuery):
    ex = EXECUTORS.get(c.from_user.id)
    if not ex:
        await c.message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."); await c.answer(); return
    await c.message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä: *{ex.phone}*")
    await c.answer()

@r_pro.callback_query(F.data == "pro:help")
async def pro_help(c: CallbackQuery):
    await c.message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –∑–∞—è–≤–∫–∏. –ù–∞–∂–∏–º–∞–π—Ç–µ üëç –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É.")
    await c.answer()

# ---- –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –≤ –ª–∏—á–∫—É –∏ —Ä–µ–∞–∫—Ü–∏—è üëç/üëé ----
def order_card_text(o: Order) -> str:
    return (
        f"üì• *–ó–∞—è–≤–∫–∞ #{o.id}*\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{o.category}*\n"
        f"–î–∞—Ç–∞: *{o.date_str}*\n"
        f"–ê–¥—Ä–µ—Å: {o.address}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {o.description}\n\n"
        "–ì–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å—Å—è?"
    )

def order_card_kb(o: Order) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üëç –ë–µ—Ä—É", callback_data=f"take:{o.id}"),
        InlineKeyboardButton(text="üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip:{o.id}")
    ]])

@r_pro.callback_query(F.data.startswith("take:"))
async def pro_take(c: CallbackQuery):
    try:
        oid = int(c.data.split(":", 1)[1])
    except Exception:
        await c.answer("–û—à–∏–±–∫–∞", show_alert=True); return
    o = ORDERS.get(oid)
    if not o:
        await c.answer("–ó–∞—è–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True); return

    ex = EXECUTORS.get(c.from_user.id)
    if not ex or ex.status != "approved":
        await c.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", show_alert=True); return

    o.likes.add(c.from_user.id)
    who = mention(c.from_user.id, c.from_user.username, c.from_user.full_name or ex.name)
    await notify_admins(
        f"‚úÖ *–û—Ç–∫–ª–∏–∫ (LIKE)* –ø–æ –∑–∞—è–≤–∫–µ #{o.id} [{o.category}]\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {who}\n–¢–µ–ª.: *{ex.phone}*\n"
        f"–ö–ª–∏–µ–Ω—Ç: *{o.customer_phone}*\n–ê–¥—Ä–µ—Å: {o.address}\n–î–∞—Ç–∞: {o.date_str}\n–û–ø–∏—Å–∞–Ω–∏–µ: {o.description}"
    )
    await c.answer("–ü—Ä–∏–Ω—è—Ç–æ! –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
    try:
        await c.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

@r_pro.callback_query(F.data.startswith("skip:"))
async def pro_skip(c: CallbackQuery):
    await c.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")
    try:
        await c.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

# ===================== DISPATCHER BOT (–∞–¥–º–∏–Ω—ã) =====================
@r_dispatcher.message(CommandStart())
async def d_start(m: Message):
    if m.from_user.id not in ADMIN_IDS:
        await m.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    await m.answer("–ü–∞–Ω–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.\n–ö–æ–º–∞–Ω–¥—ã:\n"
                   "/exec_list ‚Äî —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
                   "/exec_approve <id>\n/exec_block <id>\n/exec_info <id>")

@r_dispatcher.message(Command("exec_list"))
async def d_exec_list(m: Message):
    if m.from_user.id not in ADMIN_IDS: return
    pending = [e for e in EXECUTORS.values() if e.status == "pending"]
    approved = [e for e in EXECUTORS.values() if e.status == "approved"]
    blocked = [e for e in EXECUTORS.values() if e.status == "blocked"]
    def fmt(lst: List[Executor], title: str) -> str:
        if not lst: return f"{title}: ‚Äî"
        return f"{title} ({len(lst)}):\n" + "\n".join([f"‚Ä¢ {e.user_id} {e.name} {e.phone}" for e in lst])
    await m.answer("\n\n".join([fmt(pending, "–û–∂–∏–¥–∞—é—Ç"), fmt(approved, "–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ"), fmt(blocked, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")]))

@r_dispatcher.message(Command("exec_approve"))
async def d_exec_approve(m: Message):
    if m.from_user.id not in ADMIN_IDS: return
    parts = (m.text or "").split()
    if len(parts) < 2 or not parts[1].isdigit():
        await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /exec_approve <user_id>"); return
    uid = int(parts[1]); ex = EXECUTORS.get(uid)
    if not ex: await m.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"); return
    ex.status = "approved"
    await m.answer(f"–û–¥–æ–±—Ä–µ–Ω: {uid} {ex.name} {ex.phone}")

@r_dispatcher.message(Command("exec_block"))
async def d_exec_block(m: Message):
    if m.from_user.id not in ADMIN_IDS: return
    parts = (m.text or "").split()
    if len(parts) < 2 or not parts[1].isdigit():
        await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /exec_block <user_id>"); return
    uid = int(parts[1]); ex = EXECUTORS.get(uid)
    if not ex: await m.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"); return
    ex.status = "blocked"
    await m.answer(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {uid} {ex.name} {ex.phone}")

@r_dispatcher.message(Command("exec_info"))
async def d_exec_info(m: Message):
    if m.from_user.id not in ADMIN_IDS: return
    parts = (m.text or "").split()
    if len(parts) < 2 or not parts[1].isdigit():
        await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /exec_info <user_id>"); return
    uid = int(parts[1]); ex = EXECUTORS.get(uid)
    if not ex: await m.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"); return
    await m.answer(
        f"*{ex.name}* (id {ex.user_id})\n–¢–µ–ª.: *{ex.phone}*\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(sorted(ex.categories)) or '‚Äî'}\n–°—Ç–∞—Ç—É—Å: {ex.status}"
    )

# ===================== GLUE: SEND ORDER TO EXECUTORS =====================
async def send_order_to_executors(order_id: int):
    o = ORDERS.get(order_id)
    if not o: return
    # –ù–∞—Ö–æ–¥–∏–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    targets = [e for e in EXECUTORS.values() if e.status == "approved" and o.category in e.categories]
    if not targets:
        await notify_admins(
            f"‚ö†Ô∏è –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ [{o.category}] –¥–ª—è –∑–∞—è–≤–∫–∏ #{o.id}.\n"
            f"–ö–ª–∏–µ–Ω—Ç: *{o.customer_phone}* ‚Äî –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é."
        )
        return
    text = order_card_text(o)
    kb = order_card_kb(o)
    sent = 0
    for ex in targets:
        try:
            await pro_bot.send_message(ex.user_id, text, reply_markup=kb)
            sent += 1
        except Exception:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª Start —É ProBot ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
    if sent == 0:
        await notify_admins(
            f"‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–∫—É (–Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–∂–∞–ª Start —É ProBot) –ø–æ –∑–∞—è–≤–∫–µ #{o.id} [{o.category}]."
        )

# ===================== FASTAPI APP + WEBHOOKS =====================
app = FastAPI()

def check_secret(request: Request):
    if not WEBHOOK_SECRET:
        return
    got = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if got != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Bad secret token")

@app.get("/healthz")
async def healthz():
    return {"ok": True}

@app.post("/tg/customer")
async def tg_customer(request: Request):
    check_secret(request)
    data = await request.json()
    update = Update.model_validate(data)
    await dp_customer.feed_update(customer_bot, update)
    return JSONResponse({"ok": True})

@app.post("/tg/pro")
async def tg_pro(request: Request):
    check_secret(request)
    data = await request.json()
    update = Update.model_validate(data)
    await dp_pro.feed_update(pro_bot, update)
    return JSONResponse({"ok": True})

@app.post("/tg/dispatcher")
async def tg_dispatcher(request: Request):
    check_secret(request)
    data = await request.json()
    update = Update.model_validate(data)
    await dp_dispatcher.feed_update(dispatcher_bot, update)
    return JSONResponse({"ok": True})

async def setup_webhooks():
    # Remove existing, then set new webhooks for each bot
    await customer_bot.delete_webhook(drop_pending_updates=True)
    await pro_bot.delete_webhook(drop_pending_updates=True)
    await dispatcher_bot.delete_webhook(drop_pending_updates=True)

    await customer_bot.set_webhook(f"{BASE_WEBHOOK_URL}/tg/customer", secret_token=WEBHOOK_SECRET or None)
    await pro_bot.set_webhook(f"{BASE_WEBHOOK_URL}/tg/pro", secret_token=WEBHOOK_SECRET or None)
    await dispatcher_bot.set_webhook(f"{BASE_WEBHOOK_URL}/tg/dispatcher", secret_token=WEBHOOK_SECRET or None)

@app.on_event("startup")
async def on_startup():
    await setup_webhooks()

# Optional: manual reset endpoint (protect via secret in query)
@app.post("/setup")
async def manual_setup(request: Request):
    key = request.query_params.get("key", "")
    if WEBHOOK_SECRET and key != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Forbidden")
    await setup_webhooks()
    return PlainTextResponse("webhooks set")
